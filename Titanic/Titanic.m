% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by Neural Pattern Recognition app
% Created 21-Jul-2018 10:22:18
%
% This script assumes these variables are defined:
%
%   train_modified_INPUT - input data.
%   train_modified_TARGET - target data.
%   test_modified - test data.

x = train_modified_INPUT;
t = train_modified_TARGET;
z = test_modified;

% Choose a Training Function
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainscg';  % Scaled conjugate gradient backpropagation.

% Create a Pattern Recognition Network
hiddenLayerSize = 3;
net = patternnet(hiddenLayerSize);

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 20/100;
net.divideParam.testRatio = 10/100;

% Train the Network
[net,tr] = train(net,x,t);

% Test the training data set
y = net(x);
e = gsubtract(t,y);
performance = perform(net,t,y)
tind = vec2ind(t);
yind = vec2ind(y);
percentErrors = sum(tind ~= yind)/numel(tind);

% View the Network
view(net)

% Test the testing data set using the trained Network 
Ypred = net(z);
output = Ypred(:,1:418)
%[~,Ypred] = max(Ypred);

% Create a matrix for the output and save the predictions in a .csv file
f = zeros (418,1);

for i = (1:418)
    f(i,1) = 891+i;
    f(i,2) = round(output(i));
end

csvwrite('Output.csv', f)

% Plots
% Uncomment these lines to enable various plots.
figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
%figure, plotconfusion(t,y)
%figure, plotroc(t,y)

